# This markup was generated by PyUIbuilder: https://pyuibuilder.com

import tkinter as tk
from tkinter import Toplevel, filedialog, messagebox
from pypdf import PdfReader
import time

# Add this import to use your Modbus reading function
from clienttest import read_first_six_3000_parameters


reader = PdfReader("E1.62.pdf")
fields = reader.get_fields()

root = tk.Tk()  # Always create the root window first

pdf_path = "form.pdf"  # Default PDF path

def load_pdf_fields():
    global pdf_path
    try:
        from pypdf import PdfReader
        reader = PdfReader(pdf_path)
        fields = reader.get_fields()
        return fields
    except Exception as e:
        # Do NOT destroy root or exit; just show error and allow user to configure PDF
        messagebox.showerror("PDF Error", f"Failed to load or parse {pdf_path}:\n{e}")
        return None

def configure_pdf():
    global pdf_path, fields
    top = Toplevel(root)
    top.title("Select PDF File")
    top.geometry("400x120")
    tk.Label(top, text="Current PDF:").pack(pady=5)
    current_label = tk.Label(top, text=pdf_path)
    current_label.pack()
    def select_pdf():
        global pdf_path, fields
        file = filedialog.askopenfilename(title="Select PDF", filetypes=[("PDF Files", "*.pdf")])
        if file:
            pdf_path = file
            current_label.config(text=pdf_path)
            fields = load_pdf_fields()
            if fields is not None:
                messagebox.showinfo("PDF Loaded", f"Loaded fields from:\n{pdf_path}")
            else:
                messagebox.showerror("PDF Error", f"Failed to load fields from:\n{pdf_path}")
    tk.Button(top, text="Browse...", command=select_pdf).pack(pady=10)
    tk.Button(top, text="Close", command=top.destroy).pack()

# Add this import to use Modbus reading function from clienttest
from clienttest import read_first_six_3000_parameters

# Add this import to use Modbus reading function from clienttest
from clienttest import read_first_six_3000_parameters

fields = load_pdf_fields()
# Do NOT exit if fields is None; allow user to select a PDF from the configuration window

root.config(bg="#E4E2E2")
root.title("Main Window")
root.geometry("950x600")

# Create variables for checkbuttons
export_var = tk.IntVar()
print_var = tk.IntVar()
save_var = tk.IntVar()

# Add a StringVar for Modbus IP so it can be set via tkinter
modbus_ip_var = tk.StringVar(value="192.168.13.51")  # Default value

# Fix: Define curr before using it for datetime_var
curr = time.strftime("%Y-%m-%d %H:%M:%S")
datetime_var = tk.StringVar(value=str(curr))  # Create a StringVar to hold the current time

def open_file():
    filepath = filedialog.askopenfilename(title="Select a File", filetypes=(("PDF Files", "*.pdf"), ("All files", "*.*")))
    if filepath:
        print(f"Selected file: {filepath}")
        # Perform actions with the selected file, e.g., read its contents
        with open(filepath, 'r') as file:
            content = file.read()
            print(content)

def save_file():
    filepath = filedialog.asksaveasfilename(title="Save As", defaultextension=".pdf", filetypes=(("PDF", "*.pdf"),))
    if filepath:
        # Check if the file already exists
        print(f"Saving to: {filepath}")     
        # Perform actions to save data to the selected file
        with open(filepath, 'w') as file:
            # Replace "Sample text to save." with dynamic content if needed
            # Example: file.write(user_input.get())
            file.write("Sample text to save.")  # Intentionally writing hardcoded text



def configure():
    print("configure Alpha pressed")
    top = Toplevel()
    top.title("Configuration Window")
    ok = tk.Button(master=top, text="ok", command=top.destroy).pack()
    top.geometry("300x200")
    #choose ethernet port
    #server IP Address
    #server port number
    #other modbus varables to expose to the user

def sample():
    print("sample pressed")
    try:
        # Use the value from the modbus_ip_var
        params = read_first_six_3000_parameters(modbus_ip_var.get())
        if params:
            v1.delete(0, 'end')
            v1.insert(0, str(params.get("volts_1", "")))
            v2.delete(0, 'end')
            v2.insert(0, str(params.get("volts_2", "")))
            v3.delete(0, 'end')
            v3.insert(0, str(params.get("volts_3", "")))
            i1.delete(0, 'end')
            i1.insert(0, str(params.get("current_1", "")))
            i2.delete(0, 'end')
            i2.insert(0, str(params.get("current_2", "")))
            i3.delete(0, 'end')
            i3.insert(0, str(params.get("current_3", "")))
        else:
            # Clear fields if params is empty (connection failed or no data)
            v1.delete(0, 'end')
            v2.delete(0, 'end')
            v3.delete(0, 'end')
            i1.delete(0, 'end')
            i2.delete(0, 'end')
            i3.delete(0, 'end')
            messagebox.showerror("Modbus Error", "Could not read all parameters or no Modbus connection.")
    except Exception as e:
        # Catch any unexpected exceptions and show an error, but do not crash
        v1.delete(0, 'end')
        v2.delete(0, 'end')
        v3.delete(0, 'end')
        i1.delete(0, 'end')
        i2.delete(0, 'end')
        i3.delete(0, 'end')
        messagebox.showerror("Modbus Exception", f"An error occurred:\n{e}")

def sample_load():
    print("sample loadcell pressed")
    # pymodbus code to sample the loadcell and display the results in the entry box

def configure_loadcell():
    print("configure loadcell pressed")
    
def Getbarcode():
    print("barcode entered")
    #the barcode is a text entry that will accept a barcode scanner if the text field is selected. this variable is then passed in to this functionto query the flex api
    #login to flex api
    #send the barcode number
    #return the serial number to the entry box and save as a variable serial 

v1 = tk.Entry(master=root, text="V1")
v1.config(bg="#fff", fg="#000")
v1.place(x=30, y=195, width=120, height=40)

v2 = tk.Entry(master=root, text="V2")
v2.config(bg="#fff", fg="#000")
v2.place(x=30, y=288, width=120, height=40)

v3 = tk.Entry(master=root, text="V3")
v3.config(bg="#fff", fg="#000")
v3.place(x=30, y=385, width=120, height=40)

i1 = tk.Entry(master=root, text="I1")
i1.config(bg="#fff", fg="#000")
i1.place(x=200, y=195, width=120, height=40)

i2 = tk.Entry(master=root, text="I2")
i2.config(bg="#fff", fg="#000")
i2.place(x=200, y=288, width=120, height=40)

i3 = tk.Entry(master=root, text="I3")
i3.config(bg="#fff", fg="#000")
i3.place(x=200, y=385, width=120, height=40)

label = tk.Label(master=root, text="Voltage")
label.config(bg="#E4E2E2", fg="#000")
label.place(x=45, y=150, width=80, height=40)

label1 = tk.Label(master=root, text="Current")
label1.config(bg="#E4E2E2", fg="#000")
label1.place(x=220, y=150, width=80, height=40)

congif_alpha = tk.Button(master=root, text="Configure Alpha", command=configure)
congif_alpha.config(bg="#E4E2E2", fg="#000")
congif_alpha.place(x=200, y=40, width=120, height=40)

# Replace the old status entry with a Device Owner field

# Add a global StringVar for DeviceOwner
DeviceOwner = tk.StringVar(value="")

# Add a label for Device Owner
device_owner_label = tk.Label(master=root, text="Device Owner")
device_owner_label.config(bg="#E4E2E2", fg="#000")
device_owner_label.place(x=80, y=107, width=110, height=40)

# Add an entry for Device Owner
device_owner_entry = tk.Entry(master=root, textvariable=DeviceOwner)
device_owner_entry.config(bg="#fff", fg="#000")
device_owner_entry.place(x=200, y=107, width=120, height=40)

sample_alpha = tk.Button(master=root, text="Sample", command=sample)
sample_alpha.config(bg="#E4E2E2", fg="#000")
sample_alpha.place(x=45, y=75, width=80, height=40)

option_menu1_options = ["last used","Browse"]
option_menu1_var = tk.StringVar(value="Browse")
option_menu1 = tk.OptionMenu(root, option_menu1_var, *option_menu1_options)
option_menu1.config(bg="#E4E2E2", fg="#000")
option_menu1.place(x=607, y=326, width=120, height=30)

savePdf = tk.Checkbutton(master=root, text="save.pdf", variable=save_var)
savePdf.config(bg="#E4E2E2", fg="#000")
savePdf.select()
savePdf.place(x=426, y=346, width=120, height=30)

print_checkbox = tk.Checkbutton(master=root, text="print", variable=print_var)
print_checkbox.config(bg="#E4E2E2", fg="#000")
print_checkbox.select()
print_checkbox.place(x=419, y=419, width=120, height=30)

mass = tk.Entry(master=root, text="mass")
mass.config(bg="#fff", fg="#000")
mass.place(x=688, y=250, width=120, height=40)

sample_loadcell = tk.Button(master=root, text="sample", command=sample_load)
sample_loadcell.config(bg="#E4E2E2", fg="#000")
sample_loadcell.place(x=450, y=250, width=80, height=40)

config_loadcell = tk.Button(master=root, text="configureL", command=configure_loadcell)
config_loadcell.config(bg="#E4E2E2", fg="#000")
config_loadcell.place(x=575, y=250, width=80, height=40)

datetime = tk.Entry(master=root, textvariable=datetime_var)  # Use textvariable instead of text
datetime.bind("<FocusIn>", lambda event: datetime.delete(0, tk.END))  # Clear the entry when focused
datetime.config(bg="#fff", fg="#000")
datetime.place(x=800, y=10, width=120, height=40)

serial_label = tk.Label(root, text="serial number")
serial_label.place(x=720, y=75, width=120, height=40)

serial_entry = tk.Entry(master=root, text="serial number")
serial_entry.config(bg="#fff", fg="#000")
serial_entry.place(x=800, y=75, width=120, height=40)

barcode_label = tk.Label(root, text="barcode")
barcode_label.place(x=720, y=45, width=120, height=40)

barcode = tk.Entry(master=root, text="barcode")
barcode.config(bg="#fff", fg="#000")
barcode.place(x=800, y=45, width=120, height=40)

label2 = tk.Label(master=root, text="Loadcell")
label2.config(bg="#E4E2E2", fg="#000")
label2.place(x=575, y=200, width=80, height=40)

entry3 = tk.Entry(master=root, text="serial number")
entry3.config(bg="#fff", fg="#000")
entry3.place(x=500, y=133, width=120, height=40)

open_button = tk.Button(root, text="Open File", command=open_file)
open_button.pack()

save_button = tk.Button(root, text="Save File", command=save_file)
save_button.pack()

# Add a button to open the PDF configuration window
pdf_config_btn = tk.Button(root, text="Configure PDF", command=configure_pdf)
pdf_config_btn.place(x=800, y=60, width=120, height=30)

# Add an entry field for the Modbus IP address in your UI
modbus_ip_label = tk.Label(root, text="Modbus IP")
modbus_ip_label.place(x=45, y=10, width=80, height=30)
modbus_ip_entry = tk.Entry(root, textvariable=modbus_ip_var)
modbus_ip_entry.place(x=130, y=10, width=150, height=30)

if __name__ == "__main__":
    try:
        root.mainloop()
    except Exception as e:
        import traceback
        with open("error.log", "w") as f:
            f.write(traceback.format_exc())
        messagebox.showerror("Fatal Error", f"An unexpected error occurred:\n{e}\nSee error.log for details.")